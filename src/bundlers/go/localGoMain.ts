export const template = `
/**
* GO
* This is an autogenerated code. This code should not be modified since the file can be overwritten
* if new genezio commands are executed.
 */
package main

import (
	"encoding/json"
	"net/http"
	"os"
    "io"
    "errors"

    {{#imports}}
    {{#named}}{{name}} {{/named}}"{{{path}}}"
    {{/imports}}
)

type Event struct {
	Body string \`json:"body"\`
    GenezioEventType string \`json:"genezioEventType,omitempty"\`
    MethodName string \`json:"methodName,omitempty"\`
}

type EventBody struct {
	Id      int           \`json:"id"\`
	Method  string        \`json:"method"\`
	Params  []interface{} \`json:"params"\`
	Jsonrpc string        \`json:"jsonrpc"\`
}

type ResponseBody struct {
	Id      int         \`json:"id"\`
	Result  interface{} \`json:"result"\`
	Jsonrpc string      \`json:"jsonrpc"\`
}

type Response struct {
	StatusCode string            \`json:"statusCode"\`
	Body       string            \`json:"body"\`
	Headers    map[string]string \`json:"headers"\`
}

type ErrorStruct struct {
	Code    int    \`json:"code"\`
	Message string \`json:"message"\`
}

type ResponseBodyError struct {
	Id      int         \`json:"id"\`
	Error   ErrorStruct \`json:"error"\`
	Jsonrpc string      \`json:"jsonrpc"\`
}

func sendError(w http.ResponseWriter, err error) {
	var responseError ResponseBodyError
	responseError.Id = 0
	responseError.Error.Code = 500
	responseError.Error.Message = err.Error()
	responseError.Jsonrpc = "2.0"
    responseErrorByte, err := json.Marshal(responseError)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
	response := Response{
		StatusCode: "500",
		Body:       string(responseErrorByte),
		Headers: map[string]string{
			"Content-Type": "application/json",
			"X-Powered-By": "genezio",
		},
	}
	responseByte, err := json.Marshal(response)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	io.WriteString(w, string(responseByte))
}

func handleRequest(w http.ResponseWriter, r *http.Request) {
	var event Event
	var body EventBody
	var responseBody ResponseBody

	err := json.NewDecoder(r.Body).Decode(&event)
	if err != nil {
        sendError(w, err)
		return
	}

    defer r.Body.Close()

    class := {{class.packageName}}.New()

    if event.GenezioEventType == "cron" {
        methodName := event.MethodName
        switch methodName {
        {{#cronMethods}}
        case "{{name}}":
            err := class.{{name}}()
            if err != nil {
                sendError(w, err)
                return
            }
        {{/cronMethods}}
        default:
            sendError(w, errors.New("method not found"))
            return
        }
    } else {
        eventBody := []byte(event.Body)
        // Decode the request body into struct and check for errors
        err = json.Unmarshal(eventBody, &body)
        if err != nil {
            sendError(w, err)
            return
        }

        // Call the appropriate method
        switch body.Method {
        {{#jsonRpcMethods}}
        case "{{class.name}}.{{name}}":
            {{#parameters}}
            {{{cast}}}
            {{/parameters}}
            {{^isVoid}}result, {{/isVoid}}err {{^isVoid}}:{{/isVoid}}= class.{{name}}({{#parameters}}param{{index}}{{^last}}, {{/last}}{{/parameters}})
            if err != nil {
                sendError(w, err)
                return
            }
            {{^isVoid}}
            responseBody.Result = result
            {{/isVoid}}
        {{/jsonRpcMethods}}
        default:
            sendError(w, errors.New("method not found"))
            return
        }
        responseBody.Id = body.Id
        responseBody.Jsonrpc = body.Jsonrpc
    }

    bodyString, err := json.Marshal(responseBody)
    if err != nil {
        sendError(w, err)
        return
    }

	response := Response{
        StatusCode: "200",
		Body:       string(bodyString),
		Headers: map[string]string{
			"Content-Type": "application/json",
		},
	}

    // Encode the struct into JSON and check for errors
	responseByte, err := json.Marshal(response)
	if err != nil {
        sendError(w, err)
		return
	}
	w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(http.StatusOK)
	io.WriteString(w, string(responseByte))
}

func main() {
	port := os.Args[1]
	http.HandleFunc("/", handleRequest)
	http.ListenAndServe(":"+port, nil)
}
`;
